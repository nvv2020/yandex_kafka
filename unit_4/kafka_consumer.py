#!/usr/bin/env python3
"""
Consumer –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kafka —Ç–æ–ø–∏–∫–æ–≤ Debezium
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç confluent-kafka-python (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ—Ç Confluent)
"""

from confluent_kafka import Consumer, KafkaError, KafkaException
import json
import os
import sys
from dotenv import load_dotenv
import signal
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class DebeziumConsumer:
    def __init__(self):
        self.consumer = None
        self.running = True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ Ctrl+C –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\nüì≠ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ bootstrap servers –∏–∑ .env
            bootstrap_servers = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9094')

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –∏–∑ .env
            topics = os.getenv('KAFKA_TOPICS', 'customers.public.users,customers.public.orders')
            topics = [topic.strip() for topic in topics.split(',')]

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            group_id = os.getenv('KAFKA_CONSUMER_GROUP', 'python-debezium-consumer')
            auto_offset_reset = os.getenv('KAFKA_AUTO_OFFSET_RESET', 'earliest')

            config = {
                'bootstrap_servers': bootstrap_servers,
                'topics': topics,
                'group_id': group_id,
                'auto_offset_reset': auto_offset_reset
            }

            print("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"   Bootstrap Servers: {bootstrap_servers}")
            print(f"   Topics: {topics}")
            print(f"   Consumer Group: {group_id}")
            print(f"   Auto Offset Reset: {auto_offset_reset}")

            return config

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    def _create_consumer(self, config):
        """–°–æ–∑–¥–∞–Ω–∏–µ Kafka consumer"""
        try:
            consumer_config = {
                'bootstrap.servers': config['bootstrap_servers'],
                'group.id': config['group_id'],
                'auto.offset.reset': config['auto_offset_reset'],
                'enable.auto.commit': True,
                'auto.commit.interval.ms': 5000,
                'session.timeout.ms': 30000,
                'max.poll.interval.ms': 300000
            }

            consumer = Consumer(consumer_config)

            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
            consumer.subscribe(config['topics'])
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Kafka –∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–ø–∏–∫–∏")
            return consumer

        except KafkaException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KAFKA_BOOTSTRAP_SERVERS –≤ .env —Ñ–∞–π–ª–µ")
            raise
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer: {e}")
            raise

    def _deserialize_message(self, message_value):
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON"""
        if not message_value:
            return None

        try:
            return json.loads(message_value.decode('utf-8'))
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            return {"raw_data": message_value.hex()}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return None

    def _format_debezium_message(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Debezium –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if not data:
            return "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ Debezium CDC
        if isinstance(data, dict) and 'op' in data:
            output = []
            output.append(f"üî∏ –û–ø–µ—Ä–∞—Ü–∏—è: {self._get_operation_name(data['op'])}")

            if 'before' in data and data['before']:
                output.append("üì• –î–∞–Ω–Ω—ã–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
                output.append(json.dumps(data['before'], indent=2, ensure_ascii=False))

            if 'after' in data and data['after']:
                output.append("üì§ –î–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
                output.append(json.dumps(data['after'], indent=2, ensure_ascii=False))

            if 'source' in data:
                output.append(f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫: {data['source'].get('table', 'N/A')} "
                            f"(lsn: {data['source'].get('lsn', 'N/A')})")

            if 'ts_ms' in data:
                from datetime import datetime
                timestamp = datetime.fromtimestamp(data['ts_ms'] / 1000)
                output.append(f"üïê –í—Ä–µ–º—è: {timestamp}")

            return '\n'.join(output)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ
            return json.dumps(data, indent=2, ensure_ascii=False)

    def _get_operation_name(self, op_code):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operations = {
            'c': 'CREATE (–≤—Å—Ç–∞–≤–∫–∞)',
            'u': 'UPDATE (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'd': 'DELETE (—É–¥–∞–ª–µ–Ω–∏–µ)',
            'r': 'READ (—á—Ç–µ–Ω–∏–µ)',
            't': 'TRUNCATE (–æ—á–∏—Å—Ç–∫–∞)'
        }
        return operations.get(op_code, f'Unknown ({op_code})')

    def consume_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        config = self._load_config()

        try:
            self.consumer = self._create_consumer(config)

            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ Debezium")
            print("=" * 60)
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

            message_count = 0
            last_activity_time = time.time()
            empty_polls = 0

            while self.running:
                try:
                    # Poll —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    msg = self.consumer.poll(timeout=1.0)

                    if msg is None:
                        # –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                        empty_polls += 1
                        if empty_polls % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –ø—É—Å—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
                            print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è... (—Ç–æ–ø–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                        continue

                    if msg.error():
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Kafka
                        if msg.error().code() == KafkaError._PARTITION_EOF:
                            # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø–∞—Ä—Ç–∏—Ü–∏–∏
                            continue
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ Kafka: {msg.error()}")
                            continue

                    # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    empty_polls = 0
                    message_count += 1
                    last_activity_time = time.time()

                    self._print_message(msg, message_count)

                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    time.sleep(1)

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self._cleanup()

    def _print_message(self, msg, message_count):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ #{message_count}")
        print(f"üîñ –¢–æ–ø–∏–∫: {msg.topic()}")
        print(f"üì¶ –ü–∞—Ä—Ç–∏—Ü–∏—è: {msg.partition()}")
        print(f"üìç –°–º–µ—â–µ–Ω–∏–µ: {msg.offset()}")
        if msg.key():
            print(f"üîë –ö–ª—é—á: {msg.key().decode('utf-8')}")

        message_data = self._deserialize_message(msg.value())
        formatted_data = self._format_debezium_message(message_data)
        print("üìÑ –î–∞–Ω–Ω—ã–µ:")
        print(formatted_data)
        print("-" * 60)

    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.consumer:
            try:
                self.consumer.close()
                print("‚úÖ Consumer –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ consumer: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ Debezium Kafka Consumer (confluent-kafka-python)")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        print("   –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    consumer = DebeziumConsumer()
    consumer.consume_messages()

if __name__ == "__main__":
    main()